<meta name="viewport" content="width=device-width, initial-scale=1.0">

<div class="top-bar">
  <img  src="<%= image_path('Box_logo.png') %>" alt="Logo" class="top-bar-logo">
</div>
<div class="header-bar">
  <h1 class="welcome-text">Howdy Admin, <%= @current_user.first_name %>!</h1>
  <%= link_to "Logout", logout_path, class: "logout-btn" %>
</div>

<div class="attendance user-details">
  <!--Admin function subpages -->
  <%= link_to 'Upload TA/Admin Emails', upload_email_path, class: 'btn btn-primary' %>
  <%= link_to 'Manage Courses', courses_path, class: 'btn btn-primary' %>

  <h1>ADMIN</h1>
  <h2>Attendance Data</h2>
  <%= form_tag download_attendance_path, method: :get, id: 'attendance-form' do %>
    <!-- todo: add the course id filter-->

    <div>
    <%= label_tag :course_id, "Select Course:" %>
    <%= select_tag :course_id, options_from_collection_for_select(@courses.sort_by(&:course_number), "course_number", "course_number", selected: params[:course_number]), class: "select-input", onchange: "submitAttendanceForm()"  %>
    <%= label_tag :attendance_type, "Attendance Type:" %>
    <%= select_tag :attendance_type, options_for_select([['Student', 'student'], ['TA', 'ta']], params[:attendance_type]), class: "select-input", onchange: "submitAttendanceForm()"  %>
    </div>

    <br>
    <%= label_tag :start_date, "Start Date:" %>
    <%= date_field_tag :start_date, params[:start_date], class: "date-input", onchange: "updateDateConstraints(); submitAttendanceForm()" %>
    <%= label_tag :end_date, "End Date:" %>
    <%= date_field_tag :end_date, params[:end_date], class: "date-input", onchange: "updateDateConstraints(); submitAttendanceForm()" %>

    <br>
    <div id="attendance-form-container">
      <%= form_tag download_attendance_path, method: :get, id: 'attendance-form' do %>
        <%= submit_tag "Download Attendance CSV", class: "download-btn", id: "download-btn" %>
      <% end %>
    </div>

  <% end %> 



  
  <h2>Attendance Histogram</h2>
  <canvas id="attendanceHistogram" width="1000" height="500"></canvas>
</div>

<script>
function drawHistogram(data) {
  const canvas = document.getElementById('attendanceHistogram');
  const ctx = canvas.getContext('2d');

  // Set up histogram data: x-axis labels and y-axis values
  const labels = data.labels;
  const values = data.values;

  // Clear the canvas and set the background color to white
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.fillStyle = '#ffffff';
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  // Set margin for the histogram and define bar width and axis color
  const x_margin = canvas.width * 0.05;
  const y_margin = x_margin / 2;
  const barWidth = (canvas.width - x_margin) / 2 / 10;
  const maxVal = Math.max(...values); // Get the highest y-axis value
  const scale = (canvas.height - y_margin - y_margin) / maxVal; // Scale factor for bar height
  const axisColor = '#000';
  const fontSize = 20;

  // Draw the y-axis
  ctx.beginPath();
  ctx.moveTo(x_margin, y_margin);
  ctx.lineTo(x_margin, canvas.height - y_margin);
  ctx.strokeStyle = axisColor;
  ctx.lineWidth = 4;
  ctx.stroke();

  // Draw the x-axis
  ctx.beginPath();
  ctx.moveTo(x_margin, canvas.height - y_margin);
  ctx.lineTo(canvas.width - x_margin, canvas.height - y_margin);
  ctx.strokeStyle = axisColor;
  ctx.lineWidth = 4;
  ctx.stroke();

  // Set font properties for labels and text on the chart
  ctx.font = `${fontSize}px Arial`;
  ctx.fillStyle = axisColor;

  // Draw y-axis labels with evenly spaced intervals
  for (let i = 0; i <= 5; i++) {
    const yValue = (maxVal / 5) * i;
    const yPos = canvas.height - y_margin - (yValue * scale);
    ctx.fillText(Math.round(yValue), x_margin / 4, yPos); // Display the y-axis values
    ctx.beginPath();
    ctx.moveTo(x_margin - 5, yPos);
    ctx.lineTo(x_margin, yPos); // Draw ticks on the y-axis
    ctx.stroke();
  }

  // Define color gradient function based on normalized values
  function getColor(value, minValue, maxValue) {
    const ratio = (value - minValue) / (maxValue - minValue);
    const blue = Math.round(255 * (1 - ratio));
    const green = Math.round(255 * ratio);
    return `rgb(0, ${green}, ${blue})`;
  }

  // Animation control variables
  let progress = 0;
  const animationSpeed = 5; // Speed of the animation

  // Function to animate bars growing to their target heights
  function animateBars() {
    progress += animationSpeed;

    // Draw each bar according to current progress
    for (let i = 0; i < values.length; i++) {
      const barHeight = Math.min(values[i] * scale, progress);
      const x = x_margin + i * (barWidth + barWidth * 0.4) + barWidth * 0.6;
      const y = canvas.height - y_margin - barHeight;

      // Set bar color based on value
      ctx.fillStyle = getColor(values[i], 0, maxVal);
      ctx.fillRect(x, y, barWidth, barHeight);

      // Display bar values and labels
      ctx.fillStyle = '#000';
      ctx.fillText(values[i], x + barWidth / 3, canvas.height - y_margin - Math.min(values[i] * scale, maxVal * scale) - 10); // Display the count on each bar
      ctx.fillText(labels[i], x, canvas.height - y_margin / 4); // Display the hour labels below each bar
    }

    // Continue animation until the full height is reached for each bar
    if (progress < maxVal * scale) {
      requestAnimationFrame(animateBars);
    }
  }
  animateBars();
}

function submitAttendanceForm() {
  const form = document.getElementById('attendance-form');
  const formData = new FormData(form);
  const queryString = new URLSearchParams(formData).toString();

  fetch(`/attendances/calculate_attendance?${queryString}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'X-Requested-With': 'XMLHttpRequest'
    }
  })
    .then(response => response.json())
    .then(data => {
      // Call drawHistogram function to render data on the histogram
      drawHistogram(data.histogram);
      
      // Update the attendance table with the new parameters
      updateAttendanceTable(data.attendances);
    })
    .catch(error => console.error('Error:', error));
}

</script>

<script>
  function updateDateConstraints() {
    const endDateField = document.querySelector('.date-input[name="end_date"]');
    const startDateField = document.querySelector('.date-input[name="start_date"]');
    const today = new Date().toISOString().split("T")[0]; // Get today's date in YYYY-MM-DD format

    // Ensure end_date cannot exceed today's date
    endDateField.max = today;

    // Set the max attribute of start_date based on end_date's value
    if (endDateField.value) {
      startDateField.max = endDateField.value;
    } else {
      startDateField.removeAttribute('max'); // Reset if end_date is cleared
    }

    // Set the min attribute of end_date based on start_date's value
    if (startDateField.value) {
      endDateField.min = startDateField.value;
    } else {
      endDateField.removeAttribute('min'); // Reset if start_date is cleared
    }
  }
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Call the submitAttendanceForm function once the DOM is fully loaded
  submitAttendanceForm();
  // Initial call to set constraints when the page loads
  updateDateConstraints();

  var downloadBtn = document.getElementById('download-btn');
  downloadBtn.addEventListener('click', function(e) {
    e.preventDefault(); // prevent the default action of the button

    var form = document.getElementById('attendance-form');
    var formData = new FormData(form);
    var queryString = new URLSearchParams(formData).toString();
    var url = '<%= download_attendance_path %>' + '?' + queryString;
    window.open(url, '_blank'); // open the csv file in a new tab
  });
});
</script>

<script>
function updateAttendanceTable(data) {
  const tableBody = document.getElementById('attendanceTableBody');
  tableBody.innerHTML = ''; // Clear the current rows

  if (data.attendances && data.attendances.length > 0) {
    // Populate the table with new rows from the returned data
    data.attendances.forEach(attendance => {
      const row = document.createElement('tr');
      const courseIdCell = document.createElement('td');
      const signInTimeCell = document.createElement('td');

      courseIdCell.textContent = attendance.course_id;
      signInTimeCell.textContent = attendance.sign_in_time;

      row.appendChild(courseIdCell);
      row.appendChild(signInTimeCell);
      tableBody.appendChild(row);
    });
  } else {
    // If no records found, show a message
    const row = document.createElement('tr');
    const cell = document.createElement('td');
    cell.colSpan = 2;
    cell.textContent = 'No attendance records found.';
    row.appendChild(cell);
    tableBody.appendChild(row);
  }
}
</script>


<table class="centered-table">
  <thead>
    <tr>
      <th colspan="2"> 
        <!-- Removed separate form for parameters in the table -->
      </th>
    </tr>
    <tr>
      <th>Course ID</th>
      <th>Sign In Time</th>
    </tr>
  </thead>
  <tbody id="attendanceTableBody">
    <% if @attendances.present? %>
      <% @attendances.each do |attendance| %>
        <tr>
          <td><%= attendance.course_id %></td>
          <td><%= attendance.sign_in_time %></td>
        </tr>
      <% end %>
    <% else %>
      <tr>
        <td colspan="2">No attendance records found.</td>
      </tr>
    <% end %>
  </tbody>
</table>






